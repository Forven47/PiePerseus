name: Perseus Build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # 保证 Android SDK 变量（android-actions/setup-android 通常会设置）
      ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Setup Java (JDK 17)
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "adopt"

      - name: Setup Android SDK (cmdline-tools + platform-tools)
        uses: android-actions/setup-android@v3
        with:
          api-level: 33
          components: |
            platform-tools
            build-tools;32.0.0
            ndk;21.4.7075529
            cmdline-tools;latest

      - name: Install system packages (7zip, unzip, jq, wget)
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full unzip jq wget zip

      - name: Ensure Android tools in PATH
        # 把 build-tools 与 ndk 的二进制放到 PATH，确保 zipalign / apksigner / ndk-build 可直接调用
        run: |
          # 找到已安装的 NDK 目录（取第一个匹配）
          if [ -d "$ANDROID_SDK_ROOT/ndk" ]; then
            ndk_dir=$(ls -1 "$ANDROID_SDK_ROOT/ndk" | head -n1)
            echo "Found NDK: $ndk_dir"
            echo "$ANDROID_SDK_ROOT/ndk/$ndk_dir" >> $GITHUB_PATH
          fi
          # 把 build-tools 目录也加入 PATH（选取 32.0.0）
          if [ -d "$ANDROID_SDK_ROOT/build-tools/32.0.0" ]; then
            echo "$ANDROID_SDK_ROOT/build-tools/32.0.0" >> $GITHUB_PATH
          else
            # fallback: add any build-tools
            for d in "$ANDROID_SDK_ROOT"/build-tools/*; do
              [ -d "$d" ] && echo "$d" >> $GITHUB_PATH && break
            done
          fi
          # platform-tools (adb 等)
          if [ -d "$ANDROID_SDK_ROOT/platform-tools" ]; then
            echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
          fi

      - name: Make repo bin/ executables (if present)
        run: |
          if [ -d "./bin" ]; then
            chmod +x ./bin/* || true
          fi

      - name: Show environment (debug)
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
          which zipalign || true
          which apksigner || true
          which ndk-build || true
          java -version || true
          python3 -V

      - name: Build Perseus APK
        # 运行 perseus.py；如需强制重新解压/不跳过，添加 --no-skip
        run: |
          python3 -m pip install --upgrade pip
          # 如果你的 script 需要可执行的 apkeep/apktool, 确保 bin/ 有这些文件或脚本会去下载
          python3 perseus.py --no-skip
        env:
          # 保证 JAVA_HOME 等被传入脚本（一般 setup-java 会设置）
          JAVA_HOME: ${{ env.JAVA_HOME }}
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}

      - name: Set PERSEUS_VERSION env from built apk filename
        # 脚本生成的文件名格式是: {pkg}-{version}.patched.apk
        run: |
          apkfile=$(ls build/*.patched.apk 2>/dev/null | head -n1 || true)
          if [ -z "$apkfile" ]; then
            echo "No apk found in build/ - skipping PERSEUS_VERSION set"
            echo "PERSEUS_VERSION=unknown" >> $GITHUB_ENV
          else
            # 提取 version（基于 '-<version>.patched.apk' 这种命名）
            version=$(basename "$apkfile" | sed -E 's/.*-([0-9A-Za-z_.]+)\.patched\.apk/\1/')
            echo "Built apk: $apkfile"
            echo "PERSEUS_VERSION=$version" >> $GITHUB_ENV
          fi

      - name: Create Draft Release with APK(s)
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          draft: true
          title: "Perseus Release v${{ env.PERSEUS_VERSION }}"
          files: |
            build/*.apk
